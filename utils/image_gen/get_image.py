import textwrap
from io import BytesIO

from pathlib import Path
from PIL import Image, ImageDraw, ImageFont

# –í—Å—è–∫–∏–π –±—Ä–µ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–µ–Ω –ø–æ –¥–µ—Ñ–æ–ª—Ç–∫—É
MAX_VALUE = 100
no_color = (138, 124, 81)
ok_color = (249, 246, 195)
back_color = (192, 172, 98)
name_color = (249, 243, 190)
text_card_color = (254, 240, 193)
text_color = (60, 44, 23)

parent_path = Path(__file__).parent.absolute()
images_path = parent_path / 'images'
persons_path = images_path / 'persons'
name_font = ImageFont.truetype(str(parent_path / 'myraid.otf'), 63)  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∫—Ä—É—Ç–∏—Ç—å —Ç—É—Ç
emoji_font = ImageFont.truetype(str(parent_path / 'emoji.ttf'), 50)  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∫—Ä—É—Ç–∏—Ç—å —Ç—É—Ç
text_font = ImageFont.truetype(str(parent_path / 'blacker_sans_pro.woff'), 50)  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∫—Ä—É—Ç–∏—Ç—å —Ç—É—Ç
green_arrow = Image.open(images_path / 'green_arrow.png', mode='r', formats=["PNG"])
red_arrow = Image.open(images_path / 'red_arrow.png', mode='r', formats=["PNG"])
default_image = Image.open(images_path / 'default_image.png', mode='r', formats=["PNG"])  # –∑–∞–≥–ª—É—à–∫–∞


persons = {
    "–ö–æ—à–∫–∞ —Å –≤—Å–µ–ª–∏–≤—à–∏–º—Å—è –¥–µ–º–æ–Ω–æ–º": Image.open(persons_path / 'cat_demon600.png', mode='r', formats=["PNG"]),
    "–ö—Ä–µ—Å—Ç—å—è–Ω–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä": Image.open(persons_path / "krestyanin_alexsandr600.png", mode='r', formats=["PNG"]),
    "–ú–∞–≥-—Ü–µ–ª–∏—Ç–µ–ª—å –•—Ä–∏—Å–∞–Ω—Ñ": Image.open(persons_path / 'mag-celitel600.png', mode='r', formats=["PNG"]),
    "–î—É—Ö –ø—Ä–æ—à–ª–æ–≥–æ –∫–æ—Ä–æ–ª—è": Image.open(persons_path / "ghostking600.png", mode='r', formats=["PNG"]),
    "–ö—Ä–µ—Å—Ç—å—è–Ω–∏–Ω –ò–∞–∫–∏–Ω—Ñ": Image.open(persons_path / "krestyanin_iakinf600.png", mode='r', formats=["PNG"]),
    "–£—á—ë–Ω—ã–π –ê–∫–≤–∏—Ç–∞–Ω—Å–∫–∏–π": Image.open(persons_path / 'ucheniy600.png', mode='r', formats=["PNG"]),
    "–ò–æ–Ω–Ω–∞ –†–∞–∑—É–º–æ–≤—Å–∫–∞—è": Image.open(persons_path / 'elfie600.png', mode='r', formats=["PNG"]),
    "–†–∞–∑–≤–µ–¥—á–∏–∫ –ö–∏—Ä–∏–ª–ª": Image.open(persons_path / "razvedchik600.png", mode='r', formats=["PNG"]),
    "–ï–ø–∏—Å–∫–æ–ø –ì–∞–ª–∞–∫—Ç–∏–æ–Ω": Image.open(persons_path / 'episkop600.png', mode='r', formats=["PNG"]),
    "–û—Ö–æ—Ç–Ω–∏–∫ –°–∏–ª—å–≤–µ—Å—Ç—Ä": Image.open(persons_path / 'ohotnik600.png', mode='r', formats=["PNG"]),
    "–ö–æ–º–∞–Ω–¥–∏—Ä –†–æ–¥–∏–æ–Ω": Image.open(persons_path / "rodion600.png", mode='r', formats=["PNG"]),
    "–ì–æ—Å–ø–æ–¥–∏–Ω –ê–≤–¥–µ–π": Image.open(persons_path / "Avdey600.png", mode='r', formats=["PNG"]),
    "–õ—É—á–Ω–∏–∫ –ò—Ä–∞–∫–ª–∏–π": Image.open(persons_path / 'luchnik600.png', mode='r', formats=["PNG"]),
    "–ü–∞–ª–∞—á –ù–∏–∫–∏—Ñ–æ—Ä": Image.open(persons_path / "palach600.png", mode='r', formats=["PNG"]),
    "–°–æ–≤–µ—Ç–Ω–∏–∫ –Ø–∫–æ–≤": Image.open(persons_path / "yakov600.png", mode='r', formats=["PNG"]),
    "–®—É—Ç –†–∞–¥–º–∏—Ä": Image.open(persons_path / "shit600.png", mode='r', formats=["PNG"]),
    "–î–æ—á—å —Ü–∞—Ä—è": Image.open(persons_path / "princess600.png", mode='r', formats=["PNG"]),
    "–ö–æ–Ω–¥—Ä–∞—Ç": Image.open(persons_path / "desnica600.png", mode='r', formats=["PNG"]),
    "–î—Ä–∞–∫–æ–Ω": Image.open(persons_path / "dragon600.png", mode='r', formats=["PNG"]),
    "–ö–æ—Ä–æ–ª—å": Image.open(persons_path / "king600.png", mode='r', formats=["PNG"]),
    "–î–µ–º–æ–Ω": Image.open(persons_path / 'demon600.png', mode='r', formats=["PNG"]),
    "–ö–æ—à–∫–∞": Image.open(persons_path / 'cat600.png', mode='r', formats=["PNG"]),
}

backgrounds = {
    'light_background2': Image.open(images_path / f'light_background2.png', mode='r', formats=["PNG"]),
}


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞!!!
small_border = 44
big_border = 117.5
block = 600
fract_height = 220
fract_width = 300
step = 25
big_step = 35
black_line = 75


def get_image(
        *,
        person: str,
        replica: str,
        values: list[int] | tuple[int, int, int, int],
        name: str = ''
) -> bytes:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Ç—Ä–∏ —Ç—ã—Å—è—á–∏ –∏–Ω–∞—Ç–æ—Ä (–≤—Ç–æ—Ä–æ–π —à–∞–±–ª–æ–Ω)

    :param person: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
    :param replica: –†–µ–ø–ª–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    :param values: –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—Ä–∞–∫—Ü–∏–∏, –≤ –ø–æ—Ä—è–¥–∫–µ –¶–µ—Ä–∫–æ–≤—å, –ù–∞—Ä–æ–¥, –ê—Ä–º–∏—è, –ö–∞–∑–Ω–∞
    :param name: –ò–º—è –ø—Ä–∞–≤–∏—Ç–µ–ª—è.
    :return:
    """

    # –û—Ç–∫—Ä—ã—Ç–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–∞–∫–µ—Ç–∞), –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Å–Ω–∞—á–∞–ª–∞ –±—É–¥—É—Ç –Ω–∞–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
    background = backgrounds['light_background2']
    layout_width, layout_height = background.size
    layout = Image.new("RGBA", (layout_width, layout_height), back_color)

    # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    person = get_person(person, replica)
    person_x, person_y = int(big_border * 2) + block, small_border
    layout.paste(person, (person_x, person_y))

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ—Ä–∞–∫—Ü–∏–π
    rects = [Image.new(
        "RGBA",
        (fract_width, fract_height),
        ok_color
    )
        for _ in range(4)
    ]

    # –†–∏—Å–æ–≤–∞–Ω–∏–µ –Ω—É–∂–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
    for value, rect in zip(values, rects):
        r_draw = ImageDraw.Draw(rect)
        width, height = rect.size
        r_draw.rectangle((0, 0, rect.width, int(height * (MAX_VALUE - value) / MAX_VALUE)), no_color)

    # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ —Å–∑–∞–¥–∏ —Ñ—Ä–∞–∫—Ü–∏–π
    r1, r2, r3, r4 = rects
    layout.paste(r1, (int(big_border), small_border + step))
    layout.paste(r2, (int(big_border) + fract_width, small_border + step))
    layout.paste(r3, (int(big_border), small_border + step + fract_height + big_step))
    layout.paste(r4, (int(big_border) + fract_width, small_border + step + fract_height + big_step))

    # –ù–∞–ª–æ–∂–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –º–∞–∫–µ—Ç, –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∞ —É–∂–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –∏ —Ñ—Ä–∞–∫—Ü–∏—è–º–∏.
    layout.paste(background, (0, 0), background)

    # –ù–∞–ª–æ–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏
    draw = ImageDraw.Draw(layout)
    # name = '–í–ª–∞–¥—ã–∫–∞ ' + name  # –†–∞—Å—Å–∫–æ–º–µ–Ω—Ç –¥–ª—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ –∫ –∏–º–µ–Ω–∏
    bbox = name_font.getbbox(name)
    text_x = big_border + (block - bbox[2]) // 2
    draw.text((text_x, layout.height - big_border + 5), name, font=name_font, fill=name_color)  # –∏–≥—Ä–µ–∫ –Ω–∞—Ä–∞–Ω–¥–æ–º–∏–ª

    # –ù–∞–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–æ–Ω
    bbox = emoji_font.getbbox('üëë')
    text_y = layout.height - small_border - black_line + (black_line - bbox[3]) // 2 - 3
    text_x = big_border + bbox[2] // 3
    draw.text((text_x, text_y), 'üëë', font=emoji_font, fill=name_color)
    text_x = big_border + block - bbox[2] - bbox[2] // 3
    draw.text((text_x, text_y), 'üëë', font=emoji_font, fill=name_color)

    # –ò—Ç–æ–≥
    img_byte_arr = BytesIO()
    layout.save(img_byte_arr, format='PNG')
    # layout.show()
    return img_byte_arr.getvalue()


def get_person(person: str | None, replica: str) -> Image:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–±–æ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º, –ª–∏–±–æ —Ç–µ–∫—Å—Ç –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ.
    :param person: –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –º–æ–∂–µ—Ç –±—ã—Ç—å None –∏–ª–∏ "".
    :param replica: –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞ —Ñ–æ–Ω–µ, –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ—Ç.
    """

    if person:
        return persons.get(person, default_image)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–∞
    layout = Image.new("RGBA", (block, block), text_card_color)
    draw = ImageDraw.Draw(layout)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ª–∏–Ω–∏–π —Ç–µ–∫—Å—Ç–∞
    lines = textwrap.wrap(replica.strip().strip('.,*'), width=20)  # –°—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞
    y_delta = max([text_font.getbbox(line)[3] for line in lines])  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏
    total_height = y_delta * len(lines)  # –û–±—â–∞—è –≤—ã—Å–æ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
    text_y = (block - total_height) // 2  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–≥—Ä–µ–∫

    # –ù–∞–Ω–µ—Å–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
    for line in lines:
        bbox = text_font.getbbox(line)
        draw.text(((block - bbox[2]) // 2, text_y), line, font=text_font, fill=text_color)
        text_y += y_delta

    return layout


# get_image(
#     person='',
#     replica='*–ü—Ä–∏–∑—Ä–∞–∫ —Ç–æ—Å–∫–ª–∏–≤–æ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –≤–∞—Å –∏ –∏—Å—á–µ–∑–∞–µ—Ç. –í—ã –≤—Ö–æ–¥–∏—Ç–µ –≤ —Ç—Ä–æ–Ω–Ω—ã–π –∑–∞–ª.*',
#     values=[50, 40, 30, 20],
#     name='–ö–∏—Ä–∏–ª–ª–∫–∞)'
# )
